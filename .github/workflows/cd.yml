name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Optional version to deploy'
        required: false
        default: ''

jobs:
  deploy:
    name: Deploy to Self-Hosted Runner
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install toml
        run: pip install toml

      - name: Get version
        id: get_version
        run: |
          python - <<EOF
          import toml, os
          version = os.environ.get("INPUT_TAG_VERSION")
          if not version:
              data = toml.load("pyproject.toml")
              version = data["project"]["version"]
          with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
              f.write(f"version={version}\\n")
          EOF
        env:
          INPUT_TAG_VERSION: ${{ github.event.inputs.tag_version }}

      - name: Deploy with Docker Compose
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}
        run: |
          # Ensure deployment directory exists and copy compose file
          mkdir -p ~/Columbina
          cp docker-compose.yaml ~/Columbina/
          cd ~/Columbina
          
          # Login to Docker Hub
          echo "$DOCKERHUB_TOKEN" | docker login --username $DOCKERHUB_USERNAME --password-stdin
          
          # Create production docker-compose override
          cat > docker-compose.prod.yml << EOF
          version: "3.8"
          services:
            columbina:
              image: $DOCKERHUB_USERNAME/columbina:$IMAGE_TAG
              environment:
                - COLUMBINA_ENV=production
              env_file:
                - .env.production
          EOF
          
          # Pull the latest image
          docker pull $DOCKERHUB_USERNAME/columbina:$IMAGE_TAG
          
          # Stop existing services gracefully
          docker-compose -f docker-compose.yaml -f docker-compose.prod.yml down --remove-orphans
          
          # Start services with health checks
          docker-compose -f docker-compose.yaml -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          timeout 120 bash -c 'until docker-compose -f docker-compose.yaml -f docker-compose.prod.yml ps | grep -q "healthy\|Up"; do sleep 5; done'
          
          # Verify deployment
          docker-compose -f docker-compose.yaml -f docker-compose.prod.yml ps
          
          # Clean up old images
          docker image prune -f