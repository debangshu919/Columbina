name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Optional version to deploy'
        required: false
        default: ''

jobs:
  deploy:
    name: Deploy on AWS EC2
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install toml
        run: pip install toml

      - name: Get version
        id: get_version
        run: |
          python - <<EOF
          import toml, os
          version = os.environ.get("INPUT_TAG_VERSION")
          if not version:
              data = toml.load("pyproject.toml")
              version = data["project"]["version"]
          with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
              f.write(f"version={version}\\n")
          EOF
        env:
          INPUT_TAG_VERSION: ${{ github.event.inputs.tag_version }}

      - name: Deploy with Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}
        run: |
          # Stop and remove existing container if it exists
          docker stop columbina || true
          docker rm columbina || true
          
          # Login to Docker Hub, pull image, and run container (similar to your ECR command)
          echo "$DOCKERHUB_TOKEN" | docker login --username $DOCKERHUB_USERNAME --password-stdin && \
          docker pull $DOCKERHUB_USERNAME/columbina:$IMAGE_TAG && \
          docker run -d --name columbina -p 8000:8000 -e COLUMBINA_ENV=production $DOCKERHUB_USERNAME/columbina:$IMAGE_TAG